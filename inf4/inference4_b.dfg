begin_problem(Scenario4b).


list_of_descriptions.
name({*Qualitative Reasoning About Containers - Case 4b*}).
author({*Professor Ernest Davis, Angelica Chen, Casey McGinley, Noah Frazier-Logue*}).
status(unsatisfiable).
description({*12 July 2016*}).

end_of_list.

list_of_symbols.

functions[(Sequence,2), (Contents,2), (Place,2), (RUnion,2), (ConvexHull,1), (Singleton,1), (Pair,2), (Union,2), (CContents,2), (UContents,2), (TravelTo,1), (StandStill,0), (ManipTo,2), (Slice,2), (HPlace,1), (HUnion,2), (MovingGroup,2), (PutInUC,2), (LoadUprightContainer,2), (Place,2), (Union,2), (UContents,2), (Contents,2), (MovingGroup,2), (Ta4,0), (Ob4,0), (Rc4,0), (Ox4,0), (Agent,0), (TravelTo,1), (Tm1,0), (Ra1,0), (PutInUC,2), (LoadUprightContainer,2), (Sequence,2), (HPlace,1), (Slice,2), (StandStill,0), (Ta4,0), (Tb,0), (Tm1,0), (Tm2,0), (Ra4,0), (Rc1,0)].

predicates[(Time,1), (Object,1), (Region,1), (UprightContainer,3), (FullyOutside,2), (SmallSet,2), (ObjectSet,1), (AllStable,1), (EmptyHanded,1), (Graspable,2), (Reachable,2), (FullyOutside,2), (SafelyMovable,2), (SmallObject,1), (BoxedIn,3), (NoPartialContents,2), (Occurs,3), (Action,1), (CanGrasp,2), (UprightContainerShape,2), (UContained,3), (P,2), (Element,2), (Lt,2), (Leq,2), (Leq3, 3), (Motionless,3), (Released,3), (Grasp,2), (Moves,3), (Feasible,2), (SafeManipulate,4), (PartiallyContained,2), (OSPlace,3), (PreserveCContents,3), (PreserveUContents,3), (PreserveBoxWithLid,3), (Stable,2), (StableThroughout,3), (SmallSet,2), (Fits,2), (MuchSmaller,2), (OMuchSmaller,2), (OpenContainerShape,2), (OpenContained,2), (CContained,3), (BLContained,3), (DynamicUContainer,4), (O,2), (Cavity,2), (History,1), (Constant,3), (Grasps,3), (FeasiblePlace,2), (OV,2)].

end_of_list.

list_of_formulae(axioms).

%%%% Sortal Axioms

% Sequence
formula(forall([a1,a2], implies(and(Action(a1), Action(a2)), Action(Sequence(a1,a2))))).
% RUnion
formula(forall([u,v], implies(and(Region(u), Region(v)), Region(RUnion(u,v))))).
% ConvexHull
formula(forall([r], implies(Region(r), Region(ConvexHull(r))))).
% Singleton
formula(forall([x], implies(Object(x), ObjectSet(Singleton(x))))).
% Pair
formula(forall([x,y], implies(and(Object(x), Object(y)), ObjectSet(Pair(x,y))))).
% Union
formula(forall([sa,sb], implies(and(ObjectSet(sa), ObjectSet(sb)), ObjectSet(Union(sa,sb))))).
% Place
formula(forall([t,o], implies(and(Time(t), Object(o)), Region(Place(t,o))))).
% Contents
formula(forall([t,r], implies(and(Time(t), Region(r)), ObjectSet(Contents(t,r))))).
% CContents
formula(forall([t,s], implies(and(Time(t), ObjectSet(s)), ObjectSet(CContents(t,s))))).
% UContents
formula(forall([t,s], implies(and(Time(t), Object(s)), ObjectSet(UContents(t,s))))).
% TravelTo
formula(forall([r], implies(Region(r), Action(TravelTo(r))))).
% StandStill
formula(Action(StandStill)).
% ManipTo
formula(forall([o,r], implies(and(Object(o), Region(r)), Action(ManipTo(o,r))))).
% Slice
formula(forall([t,h], implies(and(Time(t), History(h)), Region(Slice(t,h))))).
% HPlace
formula(forall([o], implies(Object(o), History(HPlace(o))))).
% HUnion
formula(forall([ha,hb], implies(and(History(ha), History(hb)), History(HUnion(ha,hb))))).
% MovingGroup
formula(forall([t,ox], implies(and(Time(t), Object(ox)), ObjectSet(MovingGroup(t,ox))))).
% PutInUC
formula(forall([ox,ob], implies(and(Object(ox), Object(ob)), Action(PutInUC(ox,ob))))).
% LoadUprightContainer
formula(forall([ox,ob], implies(and(Object(ox), Object(ob)), Action(LoadUprightContainer(ox,ob))))).

%%% Time
%% Actions
% TASA
formula(forall([ta,tb,a], implies(Occurs(ta,tb,a), and(Time(ta), Time(tb), Action(a))))).
% TASB
formula(forall([t,a], implies(Feasible(t,a), and(Time(t), Action(a))))).

%%% Objects
%% Object sets
% OSSA
formula(forall([x,s], implies(Element(x,s), and(Object(x), ObjectSet(s))))).
%% Objects and object sets: spatio-temporal
% OOSA
formula(forall([t,s,r], implies(OSPlace(t,s,r), and(Time(t), ObjectSet(s), Region(r))))).
% OOSB
formula(forall([o,r], implies(FeasiblePlace(o,r), and(Object(o), Region(r))))).
%% Objects containing regions
% ORSA
formula(forall([t,o,r], implies(UprightContainer(t,o,r), and(Time(t), Object(o), Region(r))))).
%% Object containment
% OCSA
formula(forall([t,ox,ob], implies(or(CContained(t,ox,ob), UContained(t,ox,ob), BLContained(t,ox,ob)), and(Time(t), Object(ox), Object(ob))))).

%%% Specific Actions
%% Safe manipulation
% ASSA
formula(forall([t,o], implies(SafelyMovable(t,o), and(Time(t), Object(o))))).
% ASSB
formula(forall([t,ox,ob], implies(BoxedIn(t,ox,ob), and(Time(t), Object(ox), Object(ob))))).
% ASSC
formula(forall([ta,tb,o,r], implies(SafeManipulate(ta,tb,o,r), and(Time(ta), Time(tb), Object(o), Region(r))))).
% ASSD
formula(forall([ta,tb,o], implies(or(PreserveCContents(ta,tb,o), PreserveUContents(ta,tb,o), PreserveBoxWithLid(ta,tb,o)), and(Time(ta), Time(tb), Object(o))))).
%% Loading an upright container
% ALSA
formula(forall([ra,rb], implies(FullyOutside(ra,rb), and(Region(ra), Region(rb))))).
% ALSB
formula(forall([t,r], implies(Reachable(t,r), and(Time(t), Region(r))))).
%% Fits and small set
% OFSA
formula(forall([o], implies(SmallObject(o), Object(o)))).
% OFSB
formula(forall([s,r], implies(or(Fits(s,r), SmallSet(s,r)), and(ObjectSet(s), Region(r))))).
% OFSC
formula(forall([o,r], implies(OMuchSmaller(o,r), and(Object(o), Region(r))))).

%%% Spatial Relations
%% Basic Spatial Relations
% SRSA
formula(forall([u,v], implies(or(P(u,v),O(u,v), OV(u,v)), and(Region(u), Region(v))))).
%% Spatial containment
% SCSA/B
formula(forall([ra,rb], implies(or(OpenContained(ra,rb), FullyOutside(ra,rb), OpenContainerShape(ra,rb), UprightContainerShape(ra,rb)), and(Region(ra), Region(rb))))).
% SCSC
formula(forall([ra,rb], implies(or(Cavity(ra,rb), PartiallyContained(ra,rb)), and(Region(ra), Region(rb))))).
%% Much smaller
% SMSA
formula(forall([ra,rb], implies(MuchSmaller(ra,rb), and(Region(ra), Region(rb))))).

%%% Motion and Manipulation
%% Motion
% MMSA
formula(forall([ta,tb,o], implies(Moves(ta,tb,o), and(Time(ta), Time(tb), Object(o))))).
%% Stability and falling
% MSSA
formula(forall([t], implies(AllStable(t), Time(t)))).
% MSSB
formula(forall([t,o], implies(Stable(t,o), and(Time(t), Object(o))))).
%% Frame axioms
% MFSA
formula(forall([t,o], implies(NoPartialContents(t,o), and(Time(t), Object(o))))).
% MFSB
formula(forall([ta,tb,o], implies(or(StableThroughout(ta,tb,o), Released(ta,tb,o), Motionless(ta,tb,o)), and(Time(ta), Time(tb), Object(o))))).
%% Grasping an object
% MGSA
formula(forall([t], implies(EmptyHanded(t), Time(t)))).
% MGSB
formula(forall([t,o], implies(CanGrasp(t,o), and(Time(t), Object(o))))).
% MGSC
formula(forall([t,o], implies(Grasp(t,o), and(Time(t), Object(o))))).
% MGSD
formula(forall([ta,tb,o], implies(Grasps(ta,tb,o), and(Time(ta), Time(tb), Object(o))))).
%% Feasibility of Traveling
% MFSA
formula(forall([t,o], implies(Graspable(t,o), and(Time(t),Object(o))))).

%%% Histories
%% Basic properties of histories
% HBSA
formula(forall([t1,t2,h], implies(Constant(t1,t2,h), and(Time(t1), Time(t2), History(h))))).
%% Dynamic upright containers
% HDSA
formula(forall([ta,tb,ob,hc], implies(DynamicUContainer(ta,tb,ob,hc), and(Time(ta), Time(tb), Object(ob), History(hc))))).

% Temporal Axioms
% TID3
formula(forall([x,y,z], equiv(Leq3(x,y,z), and(Leq(x,y), Leq(y,z))))).
% TID1
formula(forall([x,y], implies(and(Time(x), Time(y)), equiv(Leq(x,y), or(Lt(x,y), equal(x,y)))))).
% TIA2
formula(forall([x,y,z], implies(and(Lt(x,y), Lt(y,z)), Lt(x,z)))).

%%%% Specifications

% C4A1
formula(UprightContainer(Ta4,Ob4,Rc4),C4A1).
% C4A2
formula(FullyOutside(Place(Ta4,Ox4), Place(Ta4, Ob4)),C4A2).
% C4A3
formula(SmallSet(Union(Contents(Ta4,Rc4), MovingGroup(Ta4,Ox4)), Rc4),C4A3).
% C4A4
formula(AllStable(Ta4),C4A4).
% C4A5
formula(EmptyHanded(Ta4),C4A5).
% C4A6
formula(Graspable(Ta4,Ox4),C4A6).
% C4A7
formula(Reachable(Ta4,Rc4),C4A7).
% C4A8
formula(and(not(equal(Ox4,Agent)), not(equal(Agent,Ob4)), not(equal(Ox4,Ob4))),C4A8).
% C4A9
formula(FullyOutside(Place(Ta4,Agent), Place(Ta4,Ob4)),C4A9).
% C4A10
formula(SafelyMovable(Ta4,Ox4),C4A10).
% C4A11
formula(SmallObject(Ob4),C4A11).
% C4A12
formula(not(BoxedIn(Ta4,Agent,Ox4)),C4A12).
% C4A13
formula(NoPartialContents(Ta4,Ob4),C4A13).


% Lemma 4A
formula(forall([ta,tb,r,o], implies(and(Region(r), Occurs(ta,tb,TravelTo(r)), EmptyHanded(ta), AllStable(ta), Object(o), not(equal(o,Agent))), and(equal(Place(tb,o), Place(ta,o)), AllStable(tb))))).

% Lemma 4G
formula(forall([ta,tb,r,rd,o], implies(and(Region(r), Occurs(ta,tb,TravelTo(r)), EmptyHanded(ta), AllStable(ta), Reachable(ta,rd)), Reachable(tb,rd)))).

% Lemma 4R
formula(forall([o,t], implies(SmallObject(o), not(UContained(t,Agent,o)))),Lem4R).

% Lemma 4Y
formula(forall([t,o], not(UContained(t,o,o))),Lem4Y).

% Lemma 4V
formula(forall([ta,tb,ob,hc,rc], implies(and(UprightContainer(ta,ob,rc), Motionless(ta,tb,ob), Constant(ta,tb,hc), equal(rc,Slice(ta,hc))), DynamicUContainer(ta,tb,ob,hc))),Lem4V).

% MGD4
formula(forall([ta,tb,o,t], equiv(Released(ta,tb,o), and(Object(o), Lt(ta,tb), forall([t], implies(and(Lt(ta,t), Leq(t,tb)), not(Grasp(t,o))))))),MGD4).

% MFD4
formula(forall([t,o], equiv(Graspable(t,o), exists([tb,ra], and(Occurs(t,tb,TravelTo(ra)), CanGrasp(tb,o))))),MFD4).

% ORD3
formula(forall([t,o,rc], equiv(UprightContainer(t,o,rc), and(Time(t), Object(o), UprightContainerShape(Place(t,o),rc)))),ORD3).

% OCD3
formula(forall([t,ox,ob], equiv(UContained(t,ox,ob), exists([rc], and(UprightContainer(t,ob,rc), Object(ox), P(Place(t,ox),rc))))),OCD3).

% OCD5
formula(forall([t,ob,s], implies(and(Time(t), Object(ob), ObjectSet(s)), equiv(equal(s, UContents(t,ob)), forall([ox], equiv(Element(ox,s), UContained(t,ox,ob)))))),OCD5).

% OSA1
formula(forall([sa,sb], implies(and(ObjectSet(sa), ObjectSet(sb)), implies(forall([x], equiv(Element(x,sa), Element(x,sb))), equal(sa,sb)))),OSA1).

% ASA3
% formula(forall([ta,tb,o], and(SafelyMovable(ta,o), implies(forall([ox], implies(not(equal(ox,Agent)), equal(Place(tb,ox), Place(ta,ox)))), SafelyMovable(tb,o))))).

formula(forall([ta,tb,o], implies(and(SafelyMovable(ta,o), forall([ox], implies(not(equal(ox,Agent)), equal(Place(tb,ox), Place(ta,ox))))), SafelyMovable(tb,o))),ASA3b).

% MRA5
formula(forall([ta,tb], and(Lt(ta,tb), AllStable(ta), EmptyHanded(ta), forall([o], implies(Object(o), implies(Released(ta,tb,o), and(Motionless(ta,tb,o), AllStable(tb))))))),MRA5).

% Lem4P
% formula(forall([o,ta,tb,r], and(Object(o), Region(r), not(equal(o,Agent)), EmptyHanded(ta), AllStable(ta), Occurs(ta,tb,TravelTo(r)), not(BoxedIn(ta,Agent,o)), implies(CanGrasp(tb,o), equal(MovingGroup(tb,o), MovingGroup(ta,o))))), Lem4P).

formula(forall([o,ta,tb,r], implies(and(Object(o), Region(r), not(equal(o,Agent)), EmptyHanded(ta), AllStable(ta), Occurs(ta,tb,TravelTo(r)), not(BoxedIn(ta,Agent,o)), CanGrasp(tb,o)), equal(MovingGroup(tb,o), MovingGroup(ta,o)))), Lem4Pb).

% Lem4H
formula(forall([t], implies(EmptyHanded(t), Feasible(t,TravelTo(Place(t,Agent))))),Lem4H).

% Lem4F
formula(forall([ta,tb,r,o,rx], implies(and(Region(r), Occurs(ta,tb,TravelTo(r)), EmptyHanded(ta), AllStable(ta), Feasible(ta,TravelTo(rx))), Feasible(tb,TravelTo(rx)))),Lem4F).

% ALA1
formula(forall([ta,ob,rc,ox], implies(and(UprightContainer(ta,ob,rc), CanGrasp(ta,ox), Reachable(ta,rc), SafelyMovable(ta,ox), AllStable(ta), SmallObject(ob), SmallSet(Union(UContents(ta,ob),MovingGroup(ta,ox)),rc)), Feasible(ta,PutInUC(ox,ob)))),ALA1).

% ALA2
formula(forall([o,ob,ta,rx,tb], implies(and(Occurs(ta,tb,PutInUC(o,ob)), Feasible(ta,TravelTo(rx)), FullyOutside(rx,Place(ta,ob))), Feasible(tb,TravelTo(rx)))),ALA2).

% ALD1
formula(forall([ta,tb,ox,ob], implies(and(Time(ta), Time(tb), Object(ox), Object(ob)), equiv(Occurs(ta,tb,PutInUC(ox,ob)), exists([rc,rx], and(UprightContainer(ta,ob,rc), P(rx,rc), SafeManipulate(ta,tb,ox,rx), PartiallyContained(Place(tb,Agent),Place(tb,ob))))))),ALD1).

% ALD2
formula(forall([ta,tb,ox,ob], implies(and(Time(ta), Time(tb), Object(ox), Object(ob)), equiv(Occurs(ta,tb,LoadUprightContainer(ox,ob)), exists([r1,r3], and(FullyOutside(r3,Place(ta,ob)), Occurs(ta,tb,Sequence(TravelTo(r1),Sequence(PutInUC(ox,ob),TravelTo(r3))))))))),ALD2).

% ASA1
formula(forall([ta,tb,o,r], implies(SafeManipulate(ta,tb,o,r), and(Grasps(ta,tb,o), forall([ox], implies(Object(ox), implies(not(equal(ox,o)), Released(ta,tb,ox)))), OSPlace(tb,MovingGroup(ta,o),r), PreserveCContents(ta,tb,o), PreserveUContents(ta,tb,o), PreserveBoxWithLid(ta,tb,o)))),ASA1).

% ASA2 (Stable takes 2 args, only one shown in axiom in paper? i just used ta for now and i'll see if i can tweak it to make it work properly)
formula(forall([ta,tb,o,r], implies(and(SafeManipulate(ta,tb,o,r), forall([ox], implies(Object(ox), or(equal(ox,Agent), Element(ox,MovingGroup(ta,o)), Stable(ta,ox))))), forall([ox], implies(Object(ox), or(equal(ox,Agent), Element(ox,MovingGroup(ta,o)), and(Motionless(ta,tb,ox), StableThroughout(ta,tb,ox))))))),ASA2).

% TAD1
formula(forall([ta,a], equiv(Feasible(ta,a), exists([tb], implies(Time(tb), Occurs(ta,tb,a))))),TAD1).

% TAD2
formula(forall([ta,tb,a1,a2], implies(and(Time(ta), Time(tb), Action(a1), Action(a2)), equiv(Occurs(ta,tb,Sequence(a1,a2)), exists([tx], and(Occurs(ta,tx,a1), Occurs(tx,tb,a2)))))),TAD2).

% TAA1
formula(forall([ta,tb,a], implies(Occurs(ta,tb,a), Lt(ta,tb)))).

% OTD1
formula(forall([t,s,r], equiv(OSPlace(t,s,r), and(forall([o], implies(Object(o), implies(Element(o,s), P(Place(t,o),r)))), forall([ra], implies(forall([o], implies(Element(o,s), P(Place(t,o),ra))), P(r,ra)))))),OTD1).

% OTD3
formula(forall([t,o,r], implies(and(Time(t),Object(o)), equiv(FeasiblePlace(o,r), exists([tr], implies(Time(tr), equal(Place(tr,o),r)))))),OTD3).

% MOD2
formula(forall([ta,tb,o], equiv(Motionless(ta,tb,o), and(Lt(ta,tb), forall([t], implies(Time(t), implies(Leq3(ta,t,tb), equal(Place(t,o), Place(ta,o)))))))),MOD2).

% OSD6
formula(forall([sa,sb,x], implies(and(ObjectSet(sa), ObjectSet(sb), Object(x)), equiv(Element(x,Union(sa,sb)), or(Element(x,sa), Element(x,sb))))),OSD6).

% OFD3
formula(forall([o], equiv(SmallObject(o), forall([ra], implies(FeasiblePlace(Agent,ra), OMuchSmaller(o,ra))))),OFD3).

% OFD4 (end 'r' might be 'r' or 'ra', unclear from paper)
formula(forall([s,r], equiv(SmallSet(s,r), and(exists([ra], and(Fits(s,ra), MuchSmaller(ra,r))), forall([o], implies(Element(o,s), OMuchSmaller(o,r)))))),OFD4).

% SMA5
formula(forall([ra,rb], implies(MuchSmaller(ra,rb), and(not(Cavity(rb,ra)), not(OpenContainerShape(ra,rb))))),SMA5).

% SCD8
formula(forall([ra,rb], equiv(PartiallyContained(ra,rb), and(not(OpenContained(ra,rb)), exists([rc], and(P(rc,ra), OpenContained(rc,rb)))))),SCD8).

% SCA2
formula(forall([rb,rc], implies(UprightContainerShape(rb,rc), OpenContainerShape(rb,rc))),SCA2).

% ASD4
formula(forall([t,ox,ob], equiv(BoxedIn(t,ox,ob), or(CContained(t,ox,ob), UContained(t,ox,ob), BLContained(t,ox,ob)))),ASD4).

% MRD3
formula(forall([ta,tb,o], equiv(StableThroughout(ta,tb,o), forall([t], implies(Leq3(ta,t,tb), Stable(t,o))))),MRD3).

% MOD3
formula(forall([ta,tb,r], equiv(Occurs(ta,tb,TravelTo(r)), and(equal(r, Place(tb,Agent)), forall([o], implies(Object(o), Released(ta,tb,o)))))),MOD3).

% MRD4
formula(forall([t,o], implies(and(Time(t), Object(o)), equiv(NoPartialContents(t,o), forall([oc], implies(Object(oc), implies(PartiallyContained(Place(t,oc),Place(t,o)), equal(oc,Agent))))))),MRD4).

% MRA4
formula(forall([ta,tb,ob], implies(and(Time(ta), Time(tb), Object(ob)), implies(and(NoPartialContents(ta,ob), forall([ox], implies(Object(ox), or(equal(ox,Agent), UContained(ta,ox,ob), and(Stable(ta,ox), Released(ta,tb,ox)))))), forall([ox], implies(Object(ox), or(equal(ox,Agent), UContained(ta,ox,ob), and(Motionless(ta,tb,ox), StableThroughout(ta,tb,ox)))))))),MRA4).

% HIA3
formula(forall([r,t1,t2], implies(and(Region(r), Lt(t1,t2)), exists([h], and(Constant(t1,t2,h), equal(Slice(t1,h),r))))),HIA3).

% HUA1 (ta,tb vs t1,t2 in paper? also issue with T value in slice at the end)
formula(forall([t,ta,tb,ob,hc,o], implies(and(DynamicUContainer(ta,tb,ob,hc), P(Place(ta,o),Slice(ta,hc)), not(UContained(t,o,ob))), exists([tm,oy], and(Lt(ta,tm), Lt(tm,tb), Grasp(tm,oy), O(Place(tm,oy),Slice(t,HPlace(hc))))))),HUA1).

% MSA1
formula(forall([ta], implies(Time(ta), exists([tb], and(Occurs(ta,tb,StandStill), AllStable(tb))))),MSA1).

% assume
formula(Occurs(Ta4,Tb,LoadUprightContainer(Ox4,Ob4)),assume).

% test 4.30
formula(Occurs(Ta4,Tb,Sequence(TravelTo(Ra4),Sequence(PutInUC(Ox4,Ob4),TravelTo(Place(Ta4,Agent)))))).

% test 4.14
formula(equal(UContents(Tm1,Ob4), UContents(Ta4,Ob4)),4dot14).

% test 4.15
formula(equal(MovingGroup(Tm1,Ox4), MovingGroup(Ta4,Ox4)),4dot15).

end_of_list.


list_of_formulae(conjectures).

% final
% formula(forall([tb], implies(Occurs(Ta4,Tb,LoadUprightContainer(Ox4,Ob4)), exists([tc], and(Occurs(tb,tc,StandStill), AllStable(tc), equal(UContents(tc,Ob4), Union(UContents(Ta4,Ob4),MovingGroup(Ta4,Ox4)))))))).

% 4.44
% formula(OSPlace(Tm2,MovingGroup(Ta4,Ox4),Rc1)).

% 4.31
formula(exists([t1,t2], and(Occurs(Ta4,t1,TravelTo(Ra4)), Occurs(t1,t2,PutInUC(Ox4,Ob4)), Occurs(t2,Tb,TravelTo(Place(Ta4,Agent)))))).

% 4.30
% formula(Occurs(Ta4,Tb,Sequence(TravelTo(Ra4),Sequence(PutInUC(Ox4,Ob4),TravelTo(Place(Ta4,Agent)))))).

end_of_list.


list_of_settings(SPASS).
{*set_flag(DocProof,1).*}
end_of_list.

end_problem.
