begin_problem(Scenario4_Lem4P).

list_of_descriptions.
name({*Qualitative Reasoning About Containers - Case 4, Lemma 4.P*}).
author({*Professor Ernest Davis, Angelica Chen, Casey McGinley, Noah Frazier-Logue*}).
status(unsatisfiable).
description({*1 July 2016*}).

end_of_list.

list_of_symbols.

functions[(Place,2), (Union,2), (UContents,2), (Contents,2), (MovingGroup,2), (Ta4,0), (Ob4,0), (Rc4,0), (Ox4,0), (Agent,0), (TravelTo,1), (Tm1,0), (Ra1,0), (RUnion,2), (Ta,0), (Tb,0), (R,0), (Ox,0), (Ol,0), (Singleton,1), (Sequence,2), (Contents,2), (Place,2), (RUnion,2), (ConvexHull,1), (Singleton,1), (Pair,2), (Union,2), (CContents,2), (UContents,2), (TravelTo,1), (StandStill,0), (ManipTo,2), (Slice,2), (HPlace,1), (HUnion,2), (MovingGroup,2), (PutInUC,2), (LoadUprightContainer,2)].

predicates[(Time,1), (Object,1), (Region,1), (UprightContainer,3), (FullyOutside,2), (SmallSet,2), (ObjectSet,1), (AllStable,1), (EmptyHanded,1), (Graspable,2), (Reachable,2), (FullyOutside,2), (SafelyMovable,2), (SmallObject,1), (BoxedIn,3), (NoPartialContents,2), (Occurs,3), (Action,1), (CanGrasp,2), (UprightContainerShape,2), (UContained,3), (P,2), (Element,2), (Lt,2), (Leq,2), (Leq3, 3), (DR,2), (NoObstacles,2), (OpenContainerShape,2), (EC,2), (C,2), (OpenContainer,3), (CContained,3), (BoxWithLid,3), (ClosedContainer,3), (OSPlace,3), (Cavity,2), (BLContained, 3), (BoxWithLidC,4), (CombinedContainer,3), (RigidObject,1), (Stable,2), (SafelyMovesWith,3), (BoxWithLid,3), (History,1)].

end_of_list.

list_of_formulae(axioms).

%%%% Sortal Axioms

% Sequence
formula(forall([a1,a2], implies(and(Action(a1), Action(a2)), Action(Sequence(a1,a2))))).
% RUnion
formula(forall([u,v], implies(and(Region(u), Region(v)), Region(RUnion(u,v))))).
% ConvexHull
formula(forall([r], implies(Region(r), Region(ConvexHull(r))))).
% Singleton
formula(forall([x], implies(Object(x), ObjectSet(Singleton(x))))).
% Pair
formula(forall([x,y], implies(and(Object(x), Object(y)), ObjectSet(Pair(x,y))))).
% Union
formula(forall([sa,sb], implies(and(ObjectSet(sa), ObjectSet(sb)), ObjectSet(Union(sa,sb))))).
% Place
formula(forall([t,o], implies(and(Time(t), Object(o)), Region(Place(t,o))))).
% Contents
formula(forall([t,r], implies(and(Time(t), Region(r)), ObjectSet(Contents(t,r))))).
% CContents
formula(forall([t,s], implies(and(Time(t), ObjectSet(s)), ObjectSet(CContents(t,s))))).
% UContents
formula(forall([t,s], implies(and(Time(t), ObjectSet(s)), ObjectSet(UContents(t,s))))).
% TravelTo
formula(forall([r], implies(Region(r), Action(TravelTo(r))))).
% StandStill
formula(Action(StandStill)).
% ManipTo
formula(forall([o,r], implies(and(Object(o), Region(r)), Action(ManipTo(o,r))))).
% Slice
formula(forall([t,h], implies(and(Time(t), History(h)), Region(Slice(t,h))))).
% HPlace
formula(forall([o], implies(Object(o), History(HPlace(o))))).
% HUnion
formula(forall([ha,hb], implies(and(History(ha), History(hb)), History(HUnion(ha,hb))))).
% MovingGroup
formula(forall([t,ox], implies(and(Time(t), Object(ox)), ObjectSet(MovingGroup(t,ox))))).
% PutInUC
formula(forall([ox,ob], implies(and(Object(ox), Object(ob)), Action(PutInUC(ox,ob))))).
% LoadUprightContainer
formula(forall([ox,ob], implies(and(Object(ox), Object(ob)), Action(LoadUprightContainer(ox,ob))))).

%%% Time
%% Actions
% TASA
formula(forall([ta,tb,a], implies(Occurs(ta,tb,a), and(Time(ta), Time(tb), Action(a))))).

%%% Objects
%% Object sets
% OSSA
formula(forall([x,s], implies(Element(x,s), and(Object(x), ObjectSet(s))))).
%% Objects and Object Sets: Spatio-Temporal
% OOSA
formula(forall([t,s,r], implies(OSPlace(t,s,r), and(Time(t), ObjectSet(s), Region(r))))).
%% Objects containing regions
% ORSA
formula(forall([t,o,r], implies(or(ClosedContainer(t,o,r), UprightContainer(t,o,r), OpenContainer(t,o,r)), and(Time(t), Object(o), Region(r))))).
%% Object containment
% OCSA
formula(forall([t,ox,ob], implies(UContained(t,ox,ob), and(Time(t), Object(ox), Object(ob))))).
% OCSB
formula(forall([t,ox,s], implies(CContained(t,ox,s), and(Time(t), Object(ox), ObjectSet(s))))).

%%% Specific Actions
%% Safe manipulation
% ASSA
formula(forall([t,o], implies(SafelyMovable(t,o), and(Time(t), Object(o))))).
% ASSB
formula(forall([t,ox,ob], implies(or(SafelyMovesWith(t,ox,ob), BoxedIn(t,ox,ob)), and(Time(t), Object(ox), Object(ob))))).
%% Loading an upright container
% ALSA
formula(forall([ra,rb], implies(FullyOutside(ra,rb), and(Region(ra), Region(rb))))).
% ALSB
formula(forall([t,r], implies(Reachable(t,r), and(Time(t), Region(r))))).
%% Fits and small set
% OFSA
formula(forall([o], implies(SmallObject(o), Object(o)))).

%%% Spatial Relations
%% Basic Spatial Relations
% SRSA
formula(forall([u,v], implies(or(P(u,v), DR(u,v), EC(u,v), C(u,v)), and(Region(u), Region(v))))).
%% Spatial containment
% SCSA/B
formula(forall([ra,rb], implies(or(FullyOutside(ra,rb), UprightContainerShape(ra,rb), OpenContainerShape(ra,rb)), and(Region(ra), Region(rb))))).
% SCSC
formula(forall([u,v], implies(Cavity(u,v), and(Region(u), Region(v))))).
% SCSD
formula(forall([ra,rb,rc], implies(CombinedContainer(ra,rb,rc), and(Region(ra), Region(rb), Region(rc))))).
%% Much smaller
% SMSA
formula(forall([s,r], implies(SmallSet(s,r), and(ObjectSet(s), Region(r))))).

%%% Motion and Manipulation
%% Stability and falling
% MSSA
formula(forall([t], implies(AllStable(t), Time(t)))).
% MSSB
formula(forall([t,o], implies(Stable(t,o), and(Time(t), Object(o))))).
%% Frame axioms
% MFSA
formula(forall([t,o], implies(NoPartialContents(t,o), and(Time(t), Object(o))))).
%% Grasping an object
% MGSA
formula(forall([t], implies(EmptyHanded(t), Time(t)))).
% MGSB
formula(forall([t,o], implies(CanGrasp(t,o), and(Time(t), Object(o))))).
%% Feasibility of Traveling
% MFSA
formula(forall([t,o], implies(Graspable(t,o), and(Time(t),Object(o))))).
% MFSB
formula(forall([t,r], implies(NoObstacles(t,r), and(Time(t), Region(r))))).

%%% Rigid Objects
%% Basic rigid objects
% ROSA
formula(forall([o], implies(RigidObject(o), Object(o)))).
%% Box with lid
% RBSA
formula(forall([t,ob,ol], implies(or(BoxWithLid(t,ob,ol), BLContained(t,ob,ol)), and(Time(t), Object(ob), Object(ol))))).
% RBSB
formula(forall([t,ob,ol,r], implies(BoxWithLidC(t,ob,ol,r), and(Time(t), Object(ob), Object(ol), Region(r))))).

% Temporal Axioms
% TID3
% formula(forall([x,y,z], equiv(Leq3(x,y,z), and(Leq(x,y), Leq(y,z))))).
% TID1
% formula(forall([x,y], implies(and(Time(x), Time(y)), equiv(Leq(x,y), or(Lt(x,y), equal(x,y)))))).
% TIA2
% formula(forall([x,y,z], implies(and(Lt(x,y), Lt(y,z)), Lt(x,z)))).

%%%% Specifications

% Lem4A
formula(forall([ta,tb,r,o], implies(and(Region(r), Occurs(ta,tb,TravelTo(r)), EmptyHanded(ta), AllStable(ta), Object(o), not(equal(o,Agent))), and(equal(Place(tb,o), Place(ta,o)), AllStable(tb)))),Lem4A).

% OSA1
formula(forall([sa,sb], implies(and(ObjectSet(sa), ObjectSet(sb)), implies(forall([x], equiv(Element(x,sa), Element(x,sb))), equal(sa,sb)))),OSA1).

% ASD4
formula(forall([t,ox,ob], equiv(BoxedIn(t,ox,ob), or(CContained(t,ox,ob), UContained(t,ox,ob), BLContained(t,ox,ob)))),ASD4).

% ASD5
formula(forall([t,ox,ob], equiv(SafelyMovesWith(t,ox,ob), or(equal(ox,ob), BoxedIn(t,ox,ob), BoxWithLid(t,ob,ox)))),ASD5).

% ASD6 (corrected from paper; ta -> t)
formula(forall([t,o,ox], implies(and(Time(t), Object(o), Object(ox)), equiv(Element(ox,MovingGroup(t,o)), SafelyMovesWith(t,ox,o)))),ASD6).

% Lem4J
formula(forall([ta,tb,ox,oy], implies(and(Time(ta), Time(tb), Object(ox), Object(oy), not(equal(ox,Agent)), forall([o], implies(not(equal(o,Agent)), equal(Place(tb,o), Place(ta,o))))), equiv(BLContained(tb,ox,oy), BLContained(ta,ox,oy)))),Lem4J).

% Lem4I
formula(forall([ox,oy,ta,tb], implies(and(Object(ox), Object(oy), Time(ta), Time(tb), equal(Place(ta,ox), Place(tb,ox)), equal(Place(ta,oy), Place(tb,oy))), and(equiv(CContained(ta,ox,Singleton(oy)), CContained(tb,ox,Singleton(oy))), equiv(UContained(ta,ox,oy), UContained(tb,ox,oy)), equiv(BoxWithLid(ta,ox,oy), BoxWithLid(tb,ox,oy))))), Lem4I).


% assume
formula(not(equal(Ox,Agent)),assume1).
formula(EmptyHanded(Ta),assume2).
formula(AllStable(Ta),assume3).
formula(Occurs(Ta,Tb,TravelTo(R)),assume4).
formula(not(BoxedIn(Ta,Agent,Ox)),assume5).
formula(not(BoxedIn(Tb,Agent,Ox)),assume6).
 
end_of_list.


list_of_formulae(conjectures).

% final
formula(forall([o,ta,tb,r], implies(and(Object(o), Region(r), not(equal(o,Agent)), EmptyHanded(ta), AllStable(ta), Occurs(ta,tb,TravelTo(r)), not(BoxedIn(ta,Agent,o)), CanGrasp(tb,o)), equal(MovingGroup(tb,o), MovingGroup(ta,o))))).

% 4P.12
% formula(equal(MovingGroup(Tb,Ox), MovingGroup(Ta,Ox))).

% 4P.11
% formula(forall([o], equiv(Element(o,MovingGroup(Tb,Ox)), Element(o,MovingGroup(Ta,Ox))))).

% 4P.10
% formula(forall([o], equiv(SafelyMovesWith(Tb,o,Ox), SafelyMovesWith(Ta,o,Ox)))).

% 4P.9
% formula(forall([o], equiv(BoxWithLid(Tb,Ox,Ol), BoxWithLid(Ta,Ox,Ol)))).

% 4P.8
% formula(forall([o], equiv(BoxedIn(Tb,o,Ox), BoxedIn(Ta,o,Ox)))).

% 4P.7
% formula(forall([o], implies(and(Object(o), not(equal(o,Agent))), equal(Place(Tb,o),Place(Ta,o))))).

end_of_list.


list_of_settings(SPASS).
{*set_flag(DocProof,1).*}
end_of_list.

end_problem.

