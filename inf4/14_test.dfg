begin_problem(Scenario4a).


list_of_descriptions.
name({*Qualitative Reasoning About Containers - Case 3*}).
author({*Professor Ernest Davis, Angelica Chen, Casey McGinley, Noah Frazier-Logue*}).
status(unsatisfiable).
description({*18 February 2016*}).

end_of_list.

list_of_symbols.

functions[(Place,2), (Union,2), (UContents,2), (Contents,2), (MovingGroup,2), (Ta4,0), (Ob4,0), (Rc4,0), (Ox4,0), (Agent,0), (TravelTo,1), (Tm1,0), (Ra1,0), (PutInUC,2), (LoadUprightContainer,2), (Sequence,2)].

predicates[(Time,1), (Object,1), (Region,1), (UprightContainer,3), (FullyOutside,2), (SmallSet,2), (ObjectSet,1), (AllStable,1), (EmptyHanded,1), (Graspable,2), (Reachable,2), (FullyOutside,2), (SafelyMovable,2), (SmallObject,1), (BoxedIn,3), (NoPartialContents,2), (Occurs,3), (Action,1), (CanGrasp,2), (UprightContainerShape,2), (UContained,3), (P,2), (Element,2), (Lt,2), (Leq,2), (Leq3, 3), (Motionless,3), (Released,3), (Grasp,2), (Moves,3), (Feasible,2)].

end_of_list.

list_of_formulae(axioms).

%%%% Sortal Axioms

%%% Time
%% Actions
% TASA
formula(forall([ta,tb,a], implies(Occurs(ta,tb,a), and(Time(ta), Time(tb), Action(a))))).
% TASB
formula(forall([t,a], implies(Feasible(t,a), and(Time(t), Action(a))))).

%%% Objects
%% Object sets
% OSSA
formula(forall([x,s], implies(Element(x,s), and(Object(x), ObjectSet(s))))).
%% Objects containing regions
% ORSA
formula(forall([t,o,r], implies(UprightContainer(t,o,r), and(Time(t), Object(o), Region(r))))).
%% Object containment
% OCSA
formula(forall([t,ox,ob], implies(UContained(t,ox,ob), and(Time(t), Object(ox), Object(ob))))).

%%% Specific Actions
%% Safe manipulation
% ASSA
formula(forall([t,o], implies(SafelyMovable(t,o), and(Time(t), Object(o))))).
% ASSB
formula(forall([t,ox,ob], implies(BoxedIn(t,ox,ob), and(Time(t), Object(ox), Object(ob))))).
%% Loading an upright container
% ALSA
formula(forall([ra,rb], implies(FullyOutside(ra,rb), and(Region(ra), Region(rb))))).
% ALSB
formula(forall([t,r], implies(Reachable(t,r), and(Time(t), Region(r))))).
%% Fits and small set
% OFSA
formula(forall([o], implies(SmallObject(o), Object(o)))).

%%% Spatial Relations
%% Basic Spatial Relations
% SRSA
formula(forall([u,v], implies(P(u,v), and(Region(u), Region(v))))).
%% Spatial containment
% SCSA/B
formula(forall([ra,rb], implies(or(FullyOutside(ra,rb), UprightContainerShape(ra,rb)), and(Region(ra), Region(rb))))).
%% Much smaller
% SMSA
formula(forall([s,r], implies(SmallSet(s,r), and(ObjectSet(s), Region(r))))).

%%% Motion and Manipulation
%% Motion
% MMSA
formula(forall([ta,tb,o], implies(Moves(ta,tb,o), and(Time(ta), Time(tb), Object(o))))).
%% Stability and falling
% MSSA
formula(forall([t], implies(AllStable(t), Time(t)))).
%% Frame axioms
% MFSA
formula(forall([t,o], implies(NoPartialContents(t,o), and(Time(t), Object(o))))).
% MFSB
formula(forall([ta,tb,o], implies(or(Released(ta,tb,o), Motionless(ta,tb,o)), and(Time(ta), Time(tb), Object(o))))).
%% Grasping an object
% MGSA
formula(forall([t], implies(EmptyHanded(t), Time(t)))).
% MGSB
formula(forall([t,o], implies(CanGrasp(t,o), and(Time(t), Object(o))))).
% MGSC
formula(forall([t,o], implies(Grasp(t,o), and(Time(t), Object(o))))).
%% Feasibility of Traveling
% MFSA
formula(forall([t,o], implies(Graspable(t,o), and(Time(t),Object(o))))).

% Temporal Axioms
% TID3
formula(forall([x,y,z], equiv(Leq3(x,y,z), and(Leq(x,y), Leq(y,z))))).
% TID1
formula(forall([x,y], implies(and(Time(x), Time(y)), equiv(Leq(x,y), or(Lt(x,y), equal(x,y)))))).
% TIA2
formula(forall([x,y,z], implies(and(Lt(x,y), Lt(y,z)), Lt(x,z)))).

%%%% Specifications

% C4A1
formula(UprightContainer(Ta4,Ob4,Rc4)).
% C4A2
formula(FullyOutside(Place(Ta4,Ox4), Place(Ta4, Ob4))).
% C4A3
formula(SmallSet(Union(Contents(Ta4,Rc4), MovingGroup(Ta4,Ox4)), Rc4)).
% C4A4
formula(AllStable(Ta4)).
% C4A5
formula(EmptyHanded(Ta4)).
% C4A6
formula(Graspable(Ta4,Ox4)).
% C4A7
formula(Reachable(Ta4,Rc4)).
% C4A8
formula(and(not(equal(Ox4,Agent)), not(equal(Agent,Ob4)), not(equal(Ox4,Ob4)))).
% C4A9
formula(FullyOutside(Place(Ta4,Agent), Place(Ta4,Ob4))).
% C4A10
formula(SafelyMovable(Ta4,Ox4)).
% C4A11
formula(SmallObject(Ob4)).
% C4A12
formula(not(BoxedIn(Ta4,Agent,Ox4))).
% C4A13
formula(NoPartialContents(Ta4,Ob4)).


% OCD5
formula(forall([t,ob,s], implies(and(Time(t), Object(ob), ObjectSet(s)), equiv(equal(s, UContents(t,ob)), forall([ox], equiv(Element(ox,s), UContained(t,ox,ob)))))),OCD5).

% OSA1
formula(forall([sa,sb], implies(and(ObjectSet(sa), ObjectSet(sb)), implies(forall([x], equiv(Element(x,sa), Element(x,sb))), equal(sa,sb)))),OSA1).

% 4.13
formula(forall([o], equiv(UContained(Tm1,o,Ob4), UContained(Ta4,o,Ob4))),4dot13).


end_of_list.


list_of_formulae(conjectures).

% final
% formula(Feasible(Ta4,LoadUprightContainer(Ox4,Ob4))).

% 4.20
% formula(Feasible(Tm1,TravelTo(Place(Ta4,Agent)))).

% 4.16a
% formula(Feasible(Tm1,PutInUC(Ox4,Ob4))).

% 4.16
% formula(SmallSet(Union(UContents(Tm1,Ob4),MovingGroup(Ta4,Ox4)),Rc4)).

% 4.15 (proves with 4.2 and 4.3 given)
% formula(equal(MovingGroup(Tm1,Ox4), MovingGroup(Ta4,Ox4))).

% 4.14 (no proof, fix)
formula(equal(UContents(Tm1,Ob4), UContents(Ta4,Ob4))).

% 4.13 (proof)
% formula(forall([o], equiv(UContained(Tm1,o,Ob4), UContained(Ta4,o,Ob4)))).

% 4.12 (proof)
% formula(not(UContained(Tm1,Agent,Ob4))).

% 4.11 (proof)
% formula(SafelyMovable(Tm1,Ox4)).

% 4.10 (proof)
% formula(Reachable(Tm1,Rc4)).

% 4.9 (proof)
% formula(UprightContainer(Tm1,Ob4,Rc4)).

% 4.6 (proof)
% formula(equal(Place(Tm1,Ob4), Place(Ta4,Ob4))).

% 4.4 (proof)
% formula(forall([o], and(Object(o), implies(not(equal(o, Agent)), equal(Place(Tm1,o), Place(Ta4,o)))))).

% 4.3
% formula(CanGrasp(Tm1,Ox4)).
% formula(exists([tm1],CanGrasp(tm1,Ox4))).
% 4.2
% formula(Occurs(Ta4,Tm1,TravelTo(Ra1))).
% formula(exists([tm1,ra], Occurs(Ta4,tm1,TravelTo(ra)))).

% 4.1
% formula(exists([tm1,ra], and(Occurs(Ta4,tm1,TravelTo(ra)), CanGrasp(tm1,Ox4)))).

end_of_list.


list_of_settings(SPASS).
{*set_flag(DocProof,1).*}
end_of_list.

end_problem.

