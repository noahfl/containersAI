begin_problem(Scenario2).

list_of_descriptions.
name({*Qualitative Reasoning About Containers - Case 2*}).
author({*Professor Ernest Davis, Angelica Chen, Casey McGinley, Noah Frazier-Logue*}).
status(unsatisfiable).
description({*10 February 2016*}).

end_of_list.

list_of_symbols.
functions[(RUnion,2), (Singleton,1), (Place,2), (Slice,2), (HPlace,1), (Os2,0), (Ob2a,0), (Ob2b,0), (Ta2,0), (Tb2,0)].

predicates[(Time, 1), (RigidObject, 1), (CContained, 3), (Ordered, 2), (Contained, 2), (Region,1), (History,1), (Object,1), (ObjectSet,1), (Lt,2), (Leq,2), (Leq3,3), (P,2), (Cavity,2), (OSPlace,3), (ClosedContainer,3), (RigidHistory,1), (O,2), (EC,2), (DR,2), (Outside,2)].

end_of_list.

list_of_formulae(axioms).


% Axiom SCA1 - given 
formula(forall([u,v,w], implies(and(Contained(u,v), Contained(v,w)), Contained(u,w)))).

% C2A1 - given
formula(RigidObject(Ob2b)).

% C2A2 - given
formula(CContained(Ta2, Os2, Singleton(Ob2a))).

% C2A3 - given
formula(CContained(Ta2, Ob2a, Singleton(Ob2b))).

% C2A4 - given
formula(Ordered(Ta2, Tb2)).

% Lemma 2.A 
formula(forall([t,o,s], implies(and(Time(t), Object(o), ObjectSet(s)), and(equiv(CContained(t,o,s), exists([rc], and(ClosedContainer(t,s,rc), P(Place(t,o),rc)))), equiv(CContained(t,o,s), exists([rs], and(OSPlace(t,s,rs), Contained(Place(t,o),rs)))))))).

% Lemma 2.B
formula(forall([t,os,ob], implies(and(Time(t), Object(os), Object(ob)), equiv(CContained(t,os,Singleton(ob)), Contained(Place(t,os),Place(t,ob)))))).

% Lemma 2.C
formula(forall([ob,ox,ta,tb], implies(and(RigidObject(ob), CContained(ta,ox,Singleton(ob)), Lt(ta,tb)), CContained(tb,ox,Singleton(ob))))).

% Lemma 2.D
formula(forall([ob,ox,ta,tb], implies(and(RigidObject(ob), CContained(ta,ox,Singleton(ob)), Lt(tb,ta)), CContained(tb,ox,Singleton(ob))))).

% Lemma 2.E
% formula(forall([ob,ox,ta,tb], implies(and(RigidObject(ob), CContained(ta,ox,Singleton(ob)), Ordered(ta,tb)), CContained(tb,ox,Singleton(ob))))).

formula(forall([ob,ox,ta,tb], implies(and(RigidObject(ob), CContained(ta,ox,Singleton(ob)), Ordered(ta,tb)), CContained(tb,ox,Singleton(ob))))).

end_of_list.

list_of_formulae(conjectures).

formula(CContained(Tb2, Os2, Singleton(Ob2a))).
end_of_list.

list_of_settings(SPASS).
{*set_flag(DocProof,1).*}
end_of_list.

end_problem.
